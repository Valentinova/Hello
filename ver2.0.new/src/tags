!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BACKLOG	frontend/frontend.old.h	43;"	d
BACKLOG	global.h	33;"	d
BAUD_RATE	backend/hardware/uart/uart.h	27;"	d
BIAS	backend/hardware/image/image.h	18;"	d
BIAS_X	backend/hardware/image/image.h	15;"	d
BIAS_Y	backend/hardware/image/image.h	16;"	d
BLACKTIME	backend/hardware/image/image.h	23;"	d
BeatTimeout	lib/timer/mytimer.c	/^void BeatTimeout(union sigval sig)  $/;"	f
CAMERA_CMD_LEN	backend/hardware/uart/uart.h	16;"	d
CAMERA_STA_IDLE	backend/hardware/uart/uart.h	21;"	d
CAMERA_STA_SHUTDOWN	backend/hardware/uart/uart.h	23;"	d
CAMERA_STA_WORKING	backend/hardware/uart/uart.h	24;"	d
CAMERA_WORK_START	backend/hardware/uart/uart.h	19;"	d
CAMERA_WORK_STOP	backend/hardware/uart/uart.h	18;"	d
CAMETA_STA_STOP	backend/hardware/uart/uart.h	22;"	d
CC	lib/fifo/test/Makefile	/^CC = gcc$/;"	m
CC	lib/timer/test/Makefile	/^CC = gcc$/;"	m
CFLAGS	lib/fifo/test/Makefile	/^CFLAGS := -g -Wall $/;"	m
CFLAGS	lib/timer/test/Makefile	/^CFLAGS := -g -Wall $/;"	m
CMD_	backend/hardware/oled/oled.h	19;"	d
CMD_SCA	backend/hardware/oled/oled.h	11;"	d
CMD_SCL	backend/hardware/oled/oled.h	14;"	d
CMD_SDOFF	backend/hardware/oled/oled.h	16;"	d
CMD_SDON	backend/hardware/oled/oled.h	15;"	d
CMD_SFCD	backend/hardware/oled/oled.h	17;"	d
CMD_SMR	backend/hardware/oled/oled.h	18;"	d
CMD_SRA	backend/hardware/oled/oled.h	13;"	d
CMD_WRA	backend/hardware/oled/oled.h	12;"	d
CURETIME	backend/hardware/image/image.h	22;"	d
CharacterMap	backend/hardware/image/fontinfo.h	/^	const short *CharacterMap;$/;"	m	struct:__anon1
Count	backend/hardware/image/fontinfo.h	/^	int Count;$/;"	m	struct:__anon1
CreateHeartBeat	lib/timer/mytimer.c	/^void CreateHeartBeat(MyTimer* timer_ptr){$/;"	f
DIR_DOWN	backend/hardware/motor/motor.h	27;"	d
DIR_UP	backend/hardware/motor/motor.h	28;"	d
DISCONNECT	global.h	45;"	d
DRIVEPHASE	backend/hardware/motor/motor.h	12;"	d
DestroyHeartBeat	lib/timer/mytimer.c	/^void DestroyHeartBeat(MyTimer* timer_ptr){$/;"	f
Draw_raster	backend/hardware/image/image.c	/^void Draw_raster(int defi_x, int defi_y, int bold) \/\/for printer debug$/;"	f
EMPTY	lib/fifo/fifo.h	10;"	d
ERROR	frontend/frontend.old.h	8;"	d
ERROR	global.h	30;"	d
FIFO_LENGTH	lib/fifo/fifo.h	9;"	d
FILENAME	frontend/frontend.old.h	45;"	d
FILENAME	global.h	58;"	d
FILENAME2	frontend/frontend.old.h	46;"	d
FILENAME2	global.h	59;"	d
FINISH_MARK	frontend/frontend.old.h	39;"	d
FINISH_MARK	global.h	56;"	d
FULL	lib/fifo/fifo.h	11;"	d
Fontinfo	backend/hardware/image/fontinfo.h	/^} Fontinfo;$/;"	t	typeref:struct:__anon1
GAPLEN	backend/hardware/motor/motor.h	15;"	d
GDI	backend/hardware/oled/oled.h	8;"	d
GET_FILE	frontend/frontend.old.h	14;"	d
GET_FILE	global.h	39;"	d
GET_FILE_JPEG	frontend/frontend.old.h	22;"	d
GET_FILE_JPEG	global.h	47;"	d
GET_PARA	frontend/frontend.old.h	13;"	d
GET_PARA	global.h	38;"	d
GPIO_DIRECTION	backend/hardware/motor/motor.c	11;"	d	file:
GPIO_INPUT	backend/hardware/motor/motor.c	12;"	d	file:
GPIO_INPUT1	backend/hardware/motor/motor.c	13;"	d	file:
GPIO_ROTOR	backend/hardware/motor/motor.c	10;"	d	file:
GRST	backend/hardware/oled/oled.h	7;"	d
GlyphAdvances	backend/hardware/image/fontinfo.h	/^	const int *GlyphAdvances;$/;"	m	struct:__anon1
Glyphs	backend/hardware/image/fontinfo.h	/^	VGPath Glyphs[256];$/;"	m	struct:__anon1
HANDSHAKE	frontend/frontend.old.h	11;"	d
HANDSHAKE	global.h	36;"	d
HEARTBEAT	frontend/frontend.old.h	23;"	d
HEARTBEAT	global.h	48;"	d
HUNG_CMD	frontend/frontend.old.h	17;"	d
HUNG_CMD	global.h	42;"	d
IDLE	frontend/frontend.old.h	44;"	d
IDLE	global.h	34;"	d
IMAGE_WORK_DISPLAY	backend/hardware/image/image.h	21;"	d
Image_fresh_layer	backend/hardware/image/image.c	/^void Image_fresh_layer(int layer)$/;"	f
InitHeartBeat	lib/timer/mytimer.c	/^void InitHeartBeat(MyTimer* timer_ptr, int interval){$/;"	f
IsTimeout	lib/timer/mytimer.c	/^int IsTimeout(MyTimer* timer_ptr){$/;"	f
LAYERS_STATUS	frontend/frontend.old.h	16;"	d
LAYERS_STATUS	global.h	41;"	d
LEVEL_HIGH	backend/hardware/motor/motor.h	21;"	d
LEVEL_LOW	backend/hardware/motor/motor.h	22;"	d
LIB	lib/fifo/test/Makefile	/^LIB := -lpthread $/;"	m
LIB	lib/timer/test/Makefile	/^LIB := -lrt$/;"	m
MAXDATASIZE	frontend/frontend.old.h	9;"	d
MAXDATASIZE	global.h	31;"	d
MICRODIV	backend/hardware/motor/motor.h	13;"	d
MOTOR_MOVE	frontend/frontend.old.h	19;"	d
MOTOR_MOVE	global.h	44;"	d
MOTOR_WORK_DOWN	backend/hardware/motor/motor.h	31;"	d
MOTOR_WORK_UP	backend/hardware/motor/motor.h	32;"	d
MSPEED	backend/hardware/motor/motor.h	14;"	d
MonoTypeface	backend/hardware/image/fontinfo.h	/^Fontinfo SansTypeface, SerifTypeface, MonoTypeface;$/;"	v
Motor_move	backend/backend.c	/^void Motor_move()$/;"	f
Motor_move	backend/backend.old.c	/^void Motor_move()$/;"	f
MyTimer	lib/timer/mytimer.h	/^	}MyTimer;$/;"	t	typeref:struct:__anon2
NORMAL	lib/fifo/fifo.h	12;"	d
OBJ	lib/fifo/test/Makefile	/^OBJ = ..\/fifo.o .\/test.o$/;"	m
OBJ	lib/timer/test/Makefile	/^OBJ = ..\/mytimer.o .\/test.o$/;"	m
OBJECTS	backend/hardware/image/test/Makefile	/^OBJECTS = image.o$/;"	m
OFFLINE	frontend/frontend.old.h	7;"	d
OFFLINE	global.h	29;"	d
ONLINE	frontend/frontend.old.h	6;"	d
ONLINE	global.h	28;"	d
PRINT_INIT_PLACE	backend/hardware/motor/motor.h	29;"	d
PROJ_CMD	frontend/frontend.old.h	21;"	d
PROJ_CMD	global.h	46;"	d
PROJ_DEBUG	frontend/frontend.old.h	30;"	d
PROJ_DEBUG	global.h	51;"	d
PROJ_LAYER	frontend/frontend.old.h	31;"	d
PROJ_LAYER	global.h	52;"	d
PROJ_OFF	frontend/frontend.old.h	29;"	d
PROJ_OFF	global.h	50;"	d
PROJ_ON	frontend/frontend.old.h	28;"	d
PROJ_ON	global.h	49;"	d
RD_NUM	backend/hardware/uart/uart.h	14;"	d
RECOVER	frontend/frontend.old.h	18;"	d
RECOVER	global.h	43;"	d
Rect_fill	backend/hardware/image/image.c	/^void Rect_fill(VGfloat x, VGfloat y, VGfloat w, VGfloat h) {$/;"	f
ResetHeartBeat	lib/timer/mytimer.c	/^void ResetHeartBeat(MyTimer* timer_ptr){$/;"	f
SCALE	backend/hardware/image/image.h	17;"	d
SCREW_ONE_CIRCLE	backend/hardware/motor/motor.h	26;"	d
SEND_INFO	frontend/frontend.old.h	12;"	d
SEND_INFO	global.h	37;"	d
SERIAL_DEV_0	backend/hardware/uart/uart.h	11;"	d
SERIAL_DEV_1	backend/hardware/uart/uart.h	12;"	d
SERVPORT	frontend/frontend.old.h	42;"	d
SERVPORT	gatekeeper/gatekeeper.old.h	4;"	d
SERVPORT	global.h	32;"	d
START_PRINT	frontend/frontend.old.h	15;"	d
START_PRINT	global.h	40;"	d
STEP_100UM	backend/hardware/motor/motor.h	16;"	d
SansTypeface	backend/hardware/image/fontinfo.h	/^Fontinfo SansTypeface, SerifTypeface, MonoTypeface;$/;"	v
SerifTypeface	backend/hardware/image/fontinfo.h	/^Fontinfo SansTypeface, SerifTypeface, MonoTypeface;$/;"	v
StopHeartBeat	lib/timer/mytimer.c	/^void StopHeartBeat(MyTimer* timer_ptr){$/;"	f
WORK_ABNORMAL	frontend/frontend.old.h	37;"	d
WORK_ABNORMAL	global.h	55;"	d
WORK_NORMAL	frontend/frontend.old.h	36;"	d
WORK_NORMAL	global.h	54;"	d
WORK_OVER	frontend/frontend.old.h	20;"	d
XGA_H	backend/hardware/image/image.h	20;"	d
XGA_W	backend/hardware/image/image.h	19;"	d
__BACKEND_H__	backend/backend.h	2;"	d
__BACKEND_H__	backend/backend.old.h	2;"	d
__CRC32_H	lib/crc32/crc32.h	17;"	d
__FIFO_H__	lib/fifo/fifo.h	7;"	d
__FRONTEND_H__	frontend/frontend.h	2;"	d
__FRONTEND_H__	frontend/frontend.old.h	2;"	d
__GATEKEEPER_H__	gatekeeper/gatekeeper.h	2;"	d
__GATEKEEPER_H__	gatekeeper/gatekeeper.old.h	2;"	d
__GLOBAL_H__	global.h	5;"	d
__HARDWARE_H__	backend/hardware/hardware.h	2;"	d
__IMAGE_H__	backend/hardware/image/image.h	2;"	d
__MOTOR_H__	backend/hardware/motor/motor.h	6;"	d
__MYTIMER_H__	lib/timer/mytimer.h	5;"	d
__OLED_H__	backend/hardware/oled/oled.h	5;"	d
__UART_H__	backend/hardware/uart/uart.h	7;"	d
_cmd_t	frontend/frontend.old.h	/^typedef struct _cmd_t$/;"	s
_cmd_t	global.h	/^typedef struct _cmd_t$/;"	s
_connect_t	frontend/frontend.old.h	/^typedef struct _connect_t$/;"	s
_connect_t	global.h	/^typedef struct _connect_t$/;"	s
_feedback_t	frontend/frontend.old.h	/^typedef struct _feedback_t$/;"	s
_feedback_t	global.h	/^typedef struct _feedback_t$/;"	s
_info_t	frontend/frontend.old.h	/^typedef struct _info_t$/;"	s
_info_t	global.h	/^typedef struct _info_t$/;"	s
_parameters_t	frontend/frontend.old.h	/^typedef struct _parameters_t$/;"	s
_parameters_t	global.h	/^typedef struct _parameters_t$/;"	s
auto_input_off_cmd	backend/hardware/uart/uart.h	/^static const u8 auto_input_off_cmd[CAMERA_CMD_LEN] = {$/;"	v
auto_input_on_cmd	backend/hardware/uart/uart.h	/^static const u8 auto_input_on_cmd[CAMERA_CMD_LEN] = {$/;"	v
auto_sig_src_cmd	backend/hardware/uart/uart.h	/^static const u8 auto_sig_src_cmd[CAMERA_CMD_LEN] = {$/;"	v
auto_sig_sync_cmd	backend/hardware/uart/uart.h	/^static const u8 auto_sig_sync_cmd[CAMERA_CMD_LEN] = {$/;"	v
backend_thread	backend/backend.c	/^void * backend_thread()$/;"	f
backend_thread	backend/backend.old.c	/^void * backend_thread()$/;"	f
beat_timeout	frontend/frontend.c	/^int beat_timeout = 0;\/\/flag:  1 means heartbeat is timeout. $/;"	v
beat_timeout	frontend/frontend.old.c	/^int beat_timeout = 0;\/\/flag:  1 means heartbeat is timeout. $/;"	v
beater	lib/timer/test/test.c	/^MyTimer* beater;$/;"	v
buf	frontend/frontend.old.h	/^	char  buf[MAXDATASIZE];$/;"	m	struct:_feedback_t
buf	frontend/frontend.old.h	/^	unsigned char buf[MAXDATASIZE];$/;"	m	struct:_cmd_t
buf	global.h	/^	char  buf[MAXDATASIZE];$/;"	m	struct:_feedback_t
buf	global.h	/^	unsigned char buf[MAXDATASIZE];$/;"	m	struct:_cmd_t
buf_len	frontend/frontend.old.h	/^	int buf_len;	\/\/the length of struct$/;"	m	struct:_cmd_t
buf_len	frontend/frontend.old.h	/^	int buf_len;\/\/the length of struct$/;"	m	struct:_feedback_t
buf_len	global.h	/^	int buf_len;$/;"	m	struct:_cmd_t
buf_len	global.h	/^	int buf_len;$/;"	m	struct:_feedback_t
clear_oled	backend/hardware/oled/oled.c	/^void clear_oled (void)$/;"	f
client_fd	frontend/frontend.c	/^int client_fd;$/;"	v
client_fd	frontend/frontend.old.c	/^int client_fd;$/;"	v
close_client	frontend/frontend.c	/^int  close_client(int cmd,int sockfd)$/;"	f
close_client	frontend/frontend.old.c	/^int  close_client(int cmd,int sockfd)$/;"	f
cmd	frontend/frontend.old.h	/^	int cmd;$/;"	m	struct:_cmd_t
cmd	global.h	/^	int cmd;$/;"	m	struct:_cmd_t
cmd_parameters	frontend/frontend.c	/^int cmd_parameters[3];$/;"	v
cmd_parameters	frontend/frontend.old.c	/^int cmd_parameters[3];$/;"	v
cmd_recv	frontend/frontend.c	/^int  cmd_recv( cmd_t * cmd,int sockfd)$/;"	f
cmd_recv	frontend/frontend.old.c	/^int  cmd_recv( cmd_t * cmd,int sockfd)$/;"	f
cmd_t	frontend/frontend.old.h	/^}cmd_t;$/;"	t	typeref:struct:_cmd_t
cmd_t	global.h	/^}cmd_t;$/;"	t	typeref:struct:_cmd_t
command	frontend/frontend.c	/^cmd_t command;$/;"	v
command	frontend/frontend.old.c	/^cmd_t command;$/;"	v
cond_fd	frontend/frontend.old.c	/^pthread_cond_t  cond_fd;$/;"	v
cond_hung	frontend/frontend.old.c	/^pthread_cond_t  cond_hung;$/;"	v
cond_job	frontend/frontend.old.c	/^pthread_cond_t  cond_job;$/;"	v
connect_t	frontend/frontend.old.h	/^} connect_t;$/;"	t	typeref:struct:_connect_t
connect_t	global.h	/^} connect_t;$/;"	t	typeref:struct:_connect_t
consumer_thread1	lib/fifo/test/test.c	/^void * consumer_thread1(void *pin){$/;"	f
consumer_thread2	lib/fifo/test/test.c	/^void * consumer_thread2(void *pin){$/;"	f
crc32_tab	lib/crc32/crc32.c	/^static const u_int crc32_tab[] = {$/;"	v	file:
cure_time	frontend/frontend.old.h	/^	int cure_time;$/;"	m	struct:_parameters_t
cure_time	global.h	/^	int cure_time;$/;"	m	struct:_parameters_t
dis_0	backend/hardware/oled/oled.c	/^static unsigned char dis_0[32] = {$/;"	v	file:
dis_1	backend/hardware/oled/oled.c	/^static unsigned char dis_1[32] = {$/;"	v	file:
dis_2	backend/hardware/oled/oled.c	/^static unsigned char dis_2[32] = {$/;"	v	file:
dis_3	backend/hardware/oled/oled.c	/^static unsigned char dis_3[32] = {$/;"	v	file:
dis_4	backend/hardware/oled/oled.c	/^static unsigned char dis_4[32] = {$/;"	v	file:
dis_5	backend/hardware/oled/oled.c	/^static unsigned char dis_5[32] = {$/;"	v	file:
dis_6	backend/hardware/oled/oled.c	/^static unsigned char dis_6[32] = {$/;"	v	file:
dis_7	backend/hardware/oled/oled.c	/^static unsigned char dis_7[32] = {$/;"	v	file:
dis_8	backend/hardware/oled/oled.c	/^static unsigned char dis_8[32] = {$/;"	v	file:
dis_9	backend/hardware/oled/oled.c	/^static unsigned char dis_9[32] = {$/;"	v	file:
dis_C	backend/hardware/oled/oled.c	/^static unsigned char dis_C[72] = {$/;"	v	file:
dis_E	backend/hardware/oled/oled.c	/^static unsigned char dis_E[72] = {$/;"	v	file:
dis_G	backend/hardware/oled/oled.c	/^static unsigned char dis_G[72] = {$/;"	v	file:
dis_H	backend/hardware/oled/oled.c	/^static unsigned char dis_H[72] = {$/;"	v	file:
dis_N	backend/hardware/oled/oled.c	/^static unsigned char dis_N[72] = {$/;"	v	file:
dis_R	backend/hardware/oled/oled.c	/^static unsigned char dis_R[72] = {$/;"	v	file:
dis_T	backend/hardware/oled/oled.c	/^static unsigned char dis_T[72] = {$/;"	v	file:
dis_dot	backend/hardware/oled/oled.c	/^static unsigned char dis_dot[32] = {$/;"	v	file:
dis_ji	backend/hardware/oled/oled.c	/^static unsigned char dis_ji[72] = {$/;"	v	file:
dis_ke	backend/hardware/oled/oled.c	/^static unsigned char dis_ke[72] = {$/;"	v	file:
dis_l3	backend/hardware/oled/oled.c	/^static unsigned char dis_l3[72] = {$/;"	v	file:
dis_qing	backend/hardware/oled/oled.c	/^static unsigned char dis_qing[72] = {$/;"	v	file:
dis_rod	backend/hardware/oled/oled.c	/^static unsigned char dis_rod[32] = {$/;"	v	file:
dis_xiao	backend/hardware/oled/oled.c	/^static unsigned char dis_xiao[72] = {$/;"	v	file:
display_font	backend/hardware/oled/oled.c	/^void display_font (void)$/;"	f
display_int	backend/hardware/oled/oled.c	/^void display_int(int num)$/;"	f
display_ip	backend/hardware/oled/oled.c	/^int display_ip(void)$/;"	f
display_oled_16	backend/hardware/oled/oled.c	/^void display_oled_16(unsigned char *array, int col_s, int col_e, int row_s, int row_e)$/;"	f
display_oled_24	backend/hardware/oled/oled.c	/^void display_oled_24(unsigned char *array, int col_s, int col_e, int row_s, int row_e)$/;"	f
display_oled_image	backend/hardware/oled/oled.c	/^void display_oled_image(const unsigned char * array)$/;"	f
dlp_state	frontend/frontend.c	/^int dlp_state = 0;   \/\/flag:  0 is off, 1 is on;  used in projector debug$/;"	v
dlp_state	frontend/frontend.old.c	/^int dlp_state = 0;   \/\/flag:  0 is off, 1 is on;  used in projector debug$/;"	v
draw_layers	backend/hardware/image/image.c	/^draw_layers(xmlNode * node,int index)$/;"	f
draw_polygon	backend/hardware/image/image.c	/^static void draw_polygon(char *buf)$/;"	f	file:
fback	frontend/frontend.c	/^feedback_t fback;$/;"	v
fback	frontend/frontend.old.c	/^feedback_t fback;$/;"	v
feedback_t	frontend/frontend.old.h	/^}feedback_t;$/;"	t	typeref:struct:_feedback_t
feedback_t	global.h	/^}feedback_t;$/;"	t	typeref:struct:_feedback_t
fifo	lib/fifo/fifo.h	/^}fifo;$/;"	t	typeref:struct:require_fifo
fifo_create	lib/fifo/fifo.c	/^fifo* fifo_create(void){$/;"	f
fifo_destroy	lib/fifo/fifo.c	/^void fifo_destroy(fifo* fifo_ptr){$/;"	f
fifo_in	lib/fifo/fifo.c	/^void fifo_in(fifo* fifo_ptr, int data){$/;"	f
fifo_out	lib/fifo/fifo.c	/^int fifo_out(fifo* fifo_ptr){$/;"	f
file_check	frontend/frontend.c	/^int file_check = 0;  \/\/flag:  xml file check. 0 is not checked, 1 is checked.$/;"	v
file_check	frontend/frontend.old.c	/^int file_check = 0;  \/\/flag:  xml file check. 0 is not checked, 1 is checked.$/;"	v
firstbeat	frontend/frontend.c	/^int firstbeat = 0;   \/\/flag:  1 means first beat from client has done.$/;"	v
firstbeat	frontend/frontend.old.c	/^int firstbeat = 0;   \/\/flag:  1 means first beat from client has done.$/;"	v
flag	lib/fifo/fifo.h	/^	int flag;$/;"	m	struct:require_fifo
freze_time	frontend/frontend.old.h	/^	int freze_time;$/;"	m	struct:_parameters_t
freze_time	global.h	/^	int freze_time;$/;"	m	struct:_parameters_t
frontend_thread	frontend/frontend.c	/^void * frontend_thread()$/;"	f
frontend_thread	frontend/frontend.old.c	/^void * frontend_thread()$/;"	f
gatekeeper_thread	gatekeeper/gatekeeper.c	/^void * gatekeeper_thread()$/;"	f
gatekeeper_thread	gatekeeper/gatekeeper.old.c	/^void * gatekeeper_thread()$/;"	f
get_file	frontend/frontend.c	/^int  get_file(int cmd,int sockfd, int name)$/;"	f
get_file	frontend/frontend.old.c	/^int  get_file(int cmd,int sockfd, int name)$/;"	f
get_para	frontend/frontend.c	/^int  get_para(int cmd,int sockfd)$/;"	f
get_para	frontend/frontend.old.c	/^int  get_para(int cmd,int sockfd)$/;"	f
getlocalip	backend/hardware/oled/oled.c	/^int getlocalip(char *outip)$/;"	f
hand_client	gatekeeper/gatekeeper.c	/^int  hand_client(int sockfd)$/;"	f
hand_client	gatekeeper/gatekeeper.old.c	/^int  hand_client(int sockfd)$/;"	f
heartbeat_timer	frontend/frontend.c	/^void heartbeat_timer(int cmd,int sockfd)$/;"	f
heartbeat_timer	frontend/frontend.old.c	/^void heartbeat_timer(int cmd,int sockfd)$/;"	f
height	backend/hardware/image/image.c	/^int height = XGA_H;$/;"	v
hung_action	frontend/frontend.c	/^int hung_action(int cmd,int sockfd)$/;"	f
hung_action	frontend/frontend.old.c	/^int hung_action(int cmd,int sockfd)$/;"	f
image_checkvalid	backend/hardware/image/image.c	/^xmlNodePtr image_checkvalid(char *file_path, xmlNodePtr root)$/;"	f
image_end	backend/hardware/image/image.c	/^void image_end()$/;"	f
image_fresh	backend/hardware/image/image.c	/^void image_fresh()$/;"	f
image_fresh_color	backend/hardware/image/image.c	/^void image_fresh_color(unsigned int R, unsigned int G, unsigned int B)$/;"	f
image_init	backend/hardware/image/image.c	/^void image_init()$/;"	f
image_initstate	frontend/frontend.c	/^int image_initstate = 0; $/;"	v
image_initstate	frontend/frontend.old.c	/^int image_initstate = 0; $/;"	v
imagetest	backend/hardware/image/image.c	/^void imagetest(int w, int h) $/;"	f
info_t	frontend/frontend.old.h	/^} info_t;$/;"	t	typeref:struct:_info_t
info_t	global.h	/^} info_t;$/;"	t	typeref:struct:_info_t
init_ssd1322	backend/hardware/oled/oled.c	/^void init_ssd1322(void)$/;"	f
init_sys	core.c	/^int  init_sys()$/;"	f
internal_beat_timeout	lib/timer/mytimer.c	/^int internal_beat_timeout; $/;"	v
interval	lib/timer/mytimer.h	/^	int interval;\/\/ms$/;"	m	struct:__anon2
item	lib/fifo/fifo.h	/^	int item[FIFO_LENGTH];$/;"	m	struct:require_fifo
keyboard_exit	lib/fifo/test/test.c	/^void keyboard_exit(int signo){$/;"	f
layers	frontend/frontend.old.h	/^        int layers;$/;"	m	struct:_parameters_t
layers	global.h	/^    int layers;$/;"	m	struct:_parameters_t
layers_status	frontend/frontend.c	/^int layers_status;$/;"	v
layers_status	frontend/frontend.old.c	/^int layers_status;$/;"	v
lock_fd	frontend/frontend.old.c	/^pthread_mutex_t lock_fd;$/;"	v
lock_fifo	lib/fifo/test/test.c	/^pthread_mutex_t lock_fifo;$/;"	v
lock_hung	frontend/frontend.old.c	/^pthread_mutex_t lock_hung;$/;"	v
lock_job	frontend/frontend.old.c	/^pthread_mutex_t lock_job;$/;"	v
magic	frontend/frontend.old.h	/^	int magic;$/;"	m	struct:_connect_t
magic	global.h	/^	int magic;$/;"	m	struct:_connect_t
main	backend/hardware/image/test/test_image.c	/^int main(int argc, char **argv)$/;"	f
main	core.c	/^int main()$/;"	f
main	lib/fifo/test/test.c	/^int main(){$/;"	f
main	lib/timer/test/test.c	/^int main(){$/;"	f
max_high	frontend/frontend.old.h	/^	int max_high;$/;"	m	struct:_info_t
max_high	global.h	/^	int max_high;$/;"	m	struct:_info_t
motor_delay_ms	backend/hardware/motor/motor.c	/^static void motor_delay_ms(int time)$/;"	f	file:
motor_finish	backend/hardware/motor/motor.c	/^void motor_finish()$/;"	f
motor_init	backend/hardware/motor/motor.c	/^int motor_init()$/;"	f
motor_layer	backend/hardware/motor/motor.c	/^int motor_layer(int len)$/;"	f
motor_move	frontend/frontend.c	/^int  motor_move(int cmd,int sockfd)$/;"	f
motor_move	frontend/frontend.old.c	/^int  motor_move(int cmd,int sockfd)$/;"	f
motor_move_direction	frontend/frontend.c	/^int motor_move_direction;$/;"	v
motor_move_direction	frontend/frontend.old.c	/^int motor_move_direction;$/;"	v
motor_move_dis	backend/hardware/motor/motor.c	/^int motor_move_dis(int direction, int len)$/;"	f
motor_move_len	frontend/frontend.c	/^int motor_move_len;$/;"	v
motor_move_len	frontend/frontend.old.c	/^int motor_move_len;$/;"	v
motor_to_low	backend/hardware/motor/motor.c	/^void motor_to_low()$/;"	f
motor_walks	backend/hardware/motor/motor.c	/^int  motor_walks(int direction, unsigned int step_count)$/;"	f
myfifo	lib/fifo/test/test.c	/^fifo* myfifo;$/;"	v
mytimer	lib/timer/mytimer.h	/^	timer_t mytimer;$/;"	m	struct:__anon2
oled_init	backend/hardware/oled/oled.c	/^int oled_init(void)$/;"	f
para_t	frontend/frontend.old.h	/^} para_t;$/;"	t	typeref:struct:_parameters_t
para_t	global.h	/^} para_t;$/;"	t	typeref:struct:_parameters_t
parameter	frontend/frontend.c	/^para_t parameter;$/;"	v
parameter	frontend/frontend.old.c	/^para_t parameter;$/;"	v
prepare_print	frontend/frontend.c	/^int  prepare_print(int cmd,int sockfd)$/;"	f
prepare_print	frontend/frontend.old.c	/^int  prepare_print(int cmd,int sockfd)$/;"	f
producer_thread1	lib/fifo/test/test.c	/^void * producer_thread1(void *pin){$/;"	f
producer_thread2	lib/fifo/test/test.c	/^void * producer_thread2(void *pin){$/;"	f
projector_control	frontend/frontend.c	/^int projector_control(int cmd,int sockfd)$/;"	f
projector_control	frontend/frontend.old.c	/^int projector_control(int cmd,int sockfd)$/;"	f
read_ptr	lib/fifo/fifo.h	/^	int read_ptr;$/;"	m	struct:require_fifo
recover_action	frontend/frontend.c	/^int recover_action(int cmd,int sockfd)$/;"	f
recover_action	frontend/frontend.old.c	/^int recover_action(int cmd,int sockfd)$/;"	f
require_fifo	lib/fifo/fifo.h	/^typedef struct require_fifo{$/;"	s
resetcnt	lib/timer/mytimer.h	/^    unsigned int resetcnt;$/;"	m	struct:__anon2
send_info	frontend/frontend.c	/^int  send_info(int cmd,int sockfd)$/;"	f
send_info	frontend/frontend.old.c	/^int  send_info(int cmd,int sockfd)$/;"	f
send_layers_status	frontend/frontend.c	/^int send_layers_status(int cmd,int sockfd)$/;"	f
send_layers_status	frontend/frontend.old.c	/^int send_layers_status(int cmd,int sockfd)$/;"	f
serial_dlp	frontend/frontend.c	/^int serial_dlp = 0;  \/\/inited in backend thread; used in projector debug$/;"	v
serial_dlp	frontend/frontend.old.c	/^int serial_dlp = 0;  \/\/inited in backend thread; used in projector debug$/;"	v
setTimer	lib/timer/mytimer.c	/^void setTimer(timer_t *timerId, int timeMSec)  $/;"	f
set_column_address	backend/hardware/oled/oled.c	/^void set_column_address(unsigned char a, unsigned char b)$/;"	f
set_row_address	backend/hardware/oled/oled.c	/^void set_row_address(unsigned char a, unsigned char b)$/;"	f
sockfd	frontend/frontend.old.h	/^	int sockfd;$/;"	m	struct:_info_t
sockfd	global.h	/^	int sockfd;$/;"	m	struct:_info_t
ssh_crc32	lib/crc32/crc32.c	/^ssh_crc32(const u_char *s, u_int len)$/;"	f
ssh_crc32_s	lib/crc32/crc32.c	/^ssh_crc32_s(const u_char *s, u_int len,u_int crc32val_temp)$/;"	f
start_cmd	backend/hardware/uart/uart.h	/^static const u8 start_cmd[CAMERA_CMD_LEN] = {$/;"	v
start_print	backend/backend.c	/^int  start_print()$/;"	f
start_print	backend/backend.old.c	/^int  start_print()$/;"	f
status	frontend/frontend.c	/^int status;$/;"	v
status	frontend/frontend.old.c	/^int status;$/;"	v
status	frontend/frontend.old.h	/^	int status;$/;"	m	struct:_connect_t
status	frontend/frontend.old.h	/^	int status;$/;"	m	struct:_feedback_t
status	global.h	/^	int status;$/;"	m	struct:_connect_t
status	global.h	/^	int status;$/;"	m	struct:_feedback_t
status_client_fd	frontend/frontend.old.c	/^int status_client_fd;$/;"	v
status_print_hung	frontend/frontend.old.c	/^int status_print_hung;$/;"	v
status_print_job	frontend/frontend.old.c	/^int status_print_job;$/;"	v
status_send	frontend/frontend.c	/^int  status_send(feedback_t * fback ,int sockfd)$/;"	f
status_send	frontend/frontend.old.c	/^int  status_send(feedback_t * fback ,int sockfd)$/;"	f
stop_cmd	backend/hardware/uart/uart.h	/^static const u8 stop_cmd[CAMERA_CMD_LEN] = {$/;"	v
sys_info	frontend/frontend.c	/^info_t sys_info;$/;"	v
sys_info	frontend/frontend.old.c	/^info_t sys_info;$/;"	v
thickness	frontend/frontend.old.h	/^	int thickness;$/;"	m	struct:_parameters_t
thickness	global.h	/^	int thickness;$/;"	m	struct:_parameters_t
timeout	lib/timer/mytimer.h	/^	int timeout; \/\/flag: 1 is timeout ture$/;"	m	struct:__anon2
uart_dev_scan	backend/hardware/uart/uart.c	/^static int uart_dev_scan(int *fd)$/;"	f	file:
uart_dlppoweroff	backend/hardware/uart/uart.c	/^int uart_dlppoweroff(int fd)$/;"	f
uart_dlppoweron	backend/hardware/uart/uart.c	/^int uart_dlppoweron(int fd)$/;"	f
uart_init	backend/hardware/uart/uart.c	/^int uart_init()$/;"	f
uart_write	backend/hardware/uart/uart.c	/^static int uart_write(int fd, const u8 *buf, u32 len)$/;"	f	file:
version	frontend/frontend.old.h	/^	int version;$/;"	m	struct:_info_t
version	global.h	/^	int version;$/;"	m	struct:_info_t
walk_one_step	backend/hardware/motor/motor.c	/^void walk_one_step()$/;"	f
width	backend/hardware/image/image.c	/^int width = XGA_W;$/;"	v
write_parameter	backend/hardware/oled/oled.c	/^void write_parameter(unsigned char Data)$/;"	f
write_ptr	lib/fifo/fifo.h	/^	int write_ptr;$/;"	m	struct:require_fifo
write_register	backend/hardware/oled/oled.c	/^void write_register(unsigned char Data)$/;"	f
